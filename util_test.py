from solution import *
import unittest

class TestCross(unittest.TestCase):
    A = 'ABCDEFGHI'
    B = '123456789'
    crossed =  ['A1', 'A2', 'A3', 'A4', 'A5', 'A6', 'A7', 'A8', 'A9',
     'B1', 'B2', 'B3', 'B4', 'B5', 'B6', 'B7', 'B8', 'B9',
     'C1', 'C2', 'C3', 'C4', 'C5', 'C6', 'C7', 'C8', 'C9',
     'D1', 'D2', 'D3', 'D4', 'D5', 'D6', 'D7', 'D8', 'D9',
     'E1', 'E2', 'E3', 'E4', 'E5', 'E6', 'E7', 'E8', 'E9',
     'F1', 'F2', 'F3', 'F4', 'F5', 'F6', 'F7', 'F8', 'F9',
     'G1', 'G2', 'G3', 'G4', 'G5', 'G6', 'G7', 'G8', 'G9',
     'H1', 'H2', 'H3', 'H4', 'H5', 'H6', 'H7', 'H8', 'H9',
     'I1', 'I2', 'I3', 'I4', 'I5', 'I6', 'I7', 'I8', 'I9']

    def test_cross(self):
        self.assertEqual(cross(self.A,self.B), self.crossed)

class TestGridValues(unittest.TestCase):
    grid_values = {'G5': '123456789', 'E2': '123456789', 'I5': '1', 'F3': '6', 'F9': '123456789', 'G3': '2', 'A7': '6', 'I2': '123456789', 'I4': '123456789', 'F7': '2', 'F5': '123456789', 'B7': '123456789', 'A1': '123456789', 'F6': '8', 'G6': '9', 'E7': '123456789', 'I3': '5', 'B1': '9', 'E8': '123456789', 'H3': '123456789', 'B2': '123456789', 'C2': '123456789', 'C7': '4', 'H4': '2', 'A4': '123456789', 'D4': '1', 'A9': '123456789', 'A6': '123456789', 'B6': '5', 'G2': '123456789', 'A8': '123456789', 'E1': '7', 'D9': '123456789', 'G4': '6', 'D2': '123456789', 'E6': '123456789', 'E9': '8', 'I9': '123456789', 'C8': '123456789', 'G9': '123456789', 'B5': '123456789', 'F4': '7', 'G1': '123456789', 'B4': '3', 'E3': '123456789', 'C9': '123456789', 'D3': '8', 'F8': '123456789', 'I7': '3', 'C6': '6', 'B3': '123456789', 'A5': '2', 'I1': '123456789', 'F1': '123456789', 'D6': '2', 'H5': '123456789', 'D7': '9', 'C3': '1', 'H7': '123456789', 'I6': '123456789', 'C1': '123456789', 'A2': '123456789', 'H8': '123456789', 'G8': '123456789', 'B9': '1', 'A3': '3', 'C4': '8', 'I8': '123456789', 'H6': '3', 'D1': '123456789', 'E5': '123456789', 'H9': '9', 'H1': '8', 'F2': '123456789', 'D5': '123456789', 'B8': '123456789', 'H2': '123456789', 'C5': '123456789', 'G7': '5', 'D8': '123456789', 'E4': '123456789'}
    grid = '..3.2.6..9..3.5..1..18.64....81.29..7.......8..67.82....26.95..8..2.3..9..5.1.3..'

    def test_grid_values(self):
        self.maxDiff = None
        self.assertEqual(grid_values(self.grid), self.grid_values)

class TestDisplay(unittest.TestCase):
    values = {'G5': '123456789', 'E2': '123456789', 'I5': '1', 'F3': '6', 'F9': '123456789', 'G3': '2', 'A7': '6', 'I2': '123456789', 'I4': '123456789', 'F7': '2', 'F5': '123456789', 'B7': '123456789', 'A1': '123456789', 'F6': '8', 'G6': '9', 'E7': '123456789', 'I3': '5', 'B1': '9', 'E8': '123456789', 'H3': '123456789', 'B2': '123456789', 'C2': '123456789', 'C7': '4', 'H4': '2', 'A4': '123456789', 'D4': '1', 'A9': '123456789', 'A6': '123456789', 'B6': '5', 'G2': '123456789', 'A8': '123456789', 'E1': '7', 'D9': '123456789', 'G4': '6', 'D2': '123456789', 'E6': '123456789', 'E9': '8', 'I9': '123456789', 'C8': '123456789', 'G9': '123456789', 'B5': '123456789', 'F4': '7', 'G1': '123456789', 'B4': '3', 'E3': '123456789', 'C9': '123456789', 'D3': '8', 'F8': '123456789', 'I7': '3', 'C6': '6', 'B3': '123456789', 'A5': '2', 'I1': '123456789', 'F1': '123456789', 'D6': '2', 'H5': '123456789', 'D7': '9', 'C3': '1', 'H7': '123456789', 'I6': '123456789', 'C1': '123456789', 'A2': '123456789', 'H8': '123456789', 'G8': '123456789', 'B9': '1', 'A3': '3', 'C4': '8', 'I8': '123456789', 'H6': '3', 'D1': '123456789', 'E5': '123456789', 'H9': '9', 'H1': '8', 'F2': '123456789', 'D5': '123456789', 'B8': '123456789', 'H2': '123456789', 'C5': '123456789', 'G7': '5', 'D8': '123456789', 'E4': '123456789'}
    display_values = '123456789 123456789     2     |    6     123456789     9     |    5     123456789 123456789 \n8     123456789 123456789 |    2     123456789     3     |123456789 123456789     9     \n123456789 123456789     5     |123456789     1     123456789 |    3     123456789 123456789 '
    def test_display(self):
        self.maxDiff = None
        print(display(self.values))

if __name__ == '__main__':
    unittest.main()
